

import java.io.File;
import java.util.HashMap;

/**
 * @info <commamd>第一位代表递归，第二位代表操作，其中<0>代表不递归/不操作<1>代表操作/递归。
 * @eg eg:<00>指不要操作当前文件夹下的文件，如果是文件则值不要操作当前文件（文件只关注第二位），<01>指只操作当前文件夹下的文件，<10>指不要操作当前文件夹下的所有文件<11>操作文件夹下的所有文件
 * @author D-pawn
 *
 */
public class DefaultFileOperate extends FileOperate {

	public boolean recursion(String command) {
		if (CommonRule.compareString("10", command)) {
			return false;
		}
		return true;
	}

	public boolean fileHandle(File file, String command) {
		if (CommonRule.getCommand(command, 1)) {
			System.out.println(file.getAbsolutePath());
		}
		if (CommonRule.getCommand(command, 1)) {
			return false;
		}
		return true;
	}

	public String getCommand(File file) {
		String result = "11";
		if (file.isFile() && !doSomething(file)) {
			return "10";
		}
		if (conditionOperation == null) {
			return result;
		}
		String command = conditionOperation.get(file.getAbsolutePath());
		if (command == null) {
			command = conditionOperation.get(file.getParentFile().getAbsolutePath());
			if (file.isDirectory() && CommonRule.compareString("01", command)) {
				command = "10";
			}
		}
		if (command != null) {
			result = command;
		}
		return result;
	}

	public boolean doSomething(File file) {
		return false;
	}
}
